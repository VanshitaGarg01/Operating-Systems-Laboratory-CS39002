#define RED "\033[1;31m"
#define GREEN "\033[1;32m"
#define YELLOW "\033[1;33m"
#define BLUE "\033[1;34m"
#define MAGENTA "\033[1;35m"
#define CYAN "\033[1;36m"
#define WHITE "\033[1;37m"
#define RESET "\033[0m"

// int *q = p + 1;
// char c;
// c = *((char *)q);
// DEBUG("1st: %d", c);
// c = *((char *)q + 1);
// DEBUG("2nd: %d", c);
// c = *((char *)q + 2);
// DEBUG("3rd: %d", c);

/*
doubts -
will we store boolean in 1 bit or 1 byte?

page table entry size - variable? because of strings (variable names)
will user access variables using variable names or indices?
page table structure?
will gc remove entries from page table or how?

what will gc_run do?
utility of gc_run if i am always calling it from a function?

start_scope
end_scope

----
start_scope - push marker on stack then push variables
end_scope - pop variables till marker is seen
gc_run - scans page table to see which variables are accessible, which are not (mark phase)
       - frees up all that are not accessible
----

dont need to consider multiple variables with same name / throw an error when something is repeated

void* gc_thread(void *arg) {
    while (1) {
        sleep(2);
        gc_run();
    }
}

1000mb

10 mb
10 mb
10 mb

970 mb

*/

/*

Page Table
string -> index
index -> counter, offset, size

variable -> counter, offset, size
counter is offset from 0 in the memory created by createMem

aligment -> ensure one single data element should not overflow one word

int createMem(long long bytes)
- allocate mem (void*)
- call gc_initialize (will create gc thread)

getVar()
getArr()

int createVar()

Garbage Collector -
mark phase - pop from stack (just before returning from function)
sweep phase - free the memory

global stack of variables

Data structures for compaction - free spaces, used spaces
free spaces -> word id, which bytes
start id of word, how many consecutive empty

gc_initialize created the gc thread

both gc and the user space program can use freeElem
just before a function calls return, call gc_run (user has to do it)
(maybe something like gc_init at the beginning - 28 min)

fb() {
    start_scope()
    int u, v;
    end_scope();
    gc_run();
}
*/